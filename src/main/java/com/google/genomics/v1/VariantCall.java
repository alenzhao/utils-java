// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/variants.proto

package com.google.genomics.v1;

/**
 * Protobuf type {@code google.genomics.v1.VariantCall}
 *
 * <pre>
 * A call represents the determination of genotype with respect to a particular
 * variant. It may include associated information such as quality and phasing.
 * For example, a call might assign a probability of 0.32 to the occurrence of
 * a SNP named rs1234 in a call set with the name NA12345.
 * </pre>
 */
public  final class VariantCall extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:google.genomics.v1.VariantCall)
    VariantCallOrBuilder {
  // Use VariantCall.newBuilder() to construct.
  private VariantCall(com.google.protobuf.GeneratedMessage.Builder builder) {
    super(builder);
  }
  private VariantCall() {
    callSetId_ = "";
    callSetName_ = "";
    genotype_ = java.util.Collections.emptyList();
    phaseset_ = "";
    genotypeLikelihood_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private VariantCall(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
              info_ = com.google.protobuf.MapField.newMapField(
                  InfoDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000020;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.ListValue>
            info = input.readMessage(
                InfoDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            info_.getMutableMap().put(info.getKey(), info.getValue());
            break;
          }
          case 42: {
            com.google.protobuf.ByteString bs = input.readBytes();

            phaseset_ = bs;
            break;
          }
          case 49: {
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
              genotypeLikelihood_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000010;
            }
            genotypeLikelihood_.add(input.readDouble());
            break;
          }
          case 50: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
              genotypeLikelihood_ = new java.util.ArrayList<java.lang.Double>();
              mutable_bitField0_ |= 0x00000010;
            }
            while (input.getBytesUntilLimit() > 0) {
              genotypeLikelihood_.add(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 56: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              genotype_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000004;
            }
            genotype_.add(input.readInt32());
            break;
          }
          case 58: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
              genotype_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000004;
            }
            while (input.getBytesUntilLimit() > 0) {
              genotype_.add(input.readInt32());
            }
            input.popLimit(limit);
            break;
          }
          case 66: {
            com.google.protobuf.ByteString bs = input.readBytes();

            callSetId_ = bs;
            break;
          }
          case 74: {
            com.google.protobuf.ByteString bs = input.readBytes();

            callSetName_ = bs;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw new RuntimeException(e.setUnfinishedMessage(this));
    } catch (java.io.IOException e) {
      throw new RuntimeException(
          new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this));
    } finally {
      if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
        genotypeLikelihood_ = java.util.Collections.unmodifiableList(genotypeLikelihood_);
      }
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        genotype_ = java.util.Collections.unmodifiableList(genotype_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_VariantCall_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 2:
        return internalGetInfo();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_VariantCall_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.genomics.v1.VariantCall.class, com.google.genomics.v1.VariantCall.Builder.class);
  }

  private int bitField0_;
  public static final int CALL_SET_ID_FIELD_NUMBER = 8;
  private volatile java.lang.Object callSetId_;
  /**
   * <code>optional string call_set_id = 8;</code>
   *
   * <pre>
   * The ID of the call set this variant call belongs to.
   * </pre>
   */
  public java.lang.String getCallSetId() {
    java.lang.Object ref = callSetId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        callSetId_ = s;
      }
      return s;
    }
  }
  /**
   * <code>optional string call_set_id = 8;</code>
   *
   * <pre>
   * The ID of the call set this variant call belongs to.
   * </pre>
   */
  public com.google.protobuf.ByteString
      getCallSetIdBytes() {
    java.lang.Object ref = callSetId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      callSetId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CALL_SET_NAME_FIELD_NUMBER = 9;
  private volatile java.lang.Object callSetName_;
  /**
   * <code>optional string call_set_name = 9;</code>
   *
   * <pre>
   * The name of the call set this variant call belongs to.
   * </pre>
   */
  public java.lang.String getCallSetName() {
    java.lang.Object ref = callSetName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        callSetName_ = s;
      }
      return s;
    }
  }
  /**
   * <code>optional string call_set_name = 9;</code>
   *
   * <pre>
   * The name of the call set this variant call belongs to.
   * </pre>
   */
  public com.google.protobuf.ByteString
      getCallSetNameBytes() {
    java.lang.Object ref = callSetName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      callSetName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int GENOTYPE_FIELD_NUMBER = 7;
  private java.util.List<java.lang.Integer> genotype_;
  /**
   * <code>repeated int32 genotype = 7;</code>
   *
   * <pre>
   * The genotype of this variant call. Each value represents either the value
   * of the `referenceBases` field or a 1-based index into
   * `alternateBases`. If a variant had a `referenceBases`
   * value of `T` and an `alternateBases`
   * value of `["A", "C"]`, and the `genotype` was
   * `[2, 1]`, that would mean the call
   * represented the heterozygous value `CA` for this variant.
   * If the `genotype` was instead `[0, 1]`, the
   * represented value would be `TA`. Ordering of the
   * genotype values is important if the `phaseset` is present.
   * If a genotype is not called (that is, a `.` is present in the
   * GT string) -1 is returned.
   * </pre>
   */
  public java.util.List<java.lang.Integer>
      getGenotypeList() {
    return genotype_;
  }
  /**
   * <code>repeated int32 genotype = 7;</code>
   *
   * <pre>
   * The genotype of this variant call. Each value represents either the value
   * of the `referenceBases` field or a 1-based index into
   * `alternateBases`. If a variant had a `referenceBases`
   * value of `T` and an `alternateBases`
   * value of `["A", "C"]`, and the `genotype` was
   * `[2, 1]`, that would mean the call
   * represented the heterozygous value `CA` for this variant.
   * If the `genotype` was instead `[0, 1]`, the
   * represented value would be `TA`. Ordering of the
   * genotype values is important if the `phaseset` is present.
   * If a genotype is not called (that is, a `.` is present in the
   * GT string) -1 is returned.
   * </pre>
   */
  public int getGenotypeCount() {
    return genotype_.size();
  }
  /**
   * <code>repeated int32 genotype = 7;</code>
   *
   * <pre>
   * The genotype of this variant call. Each value represents either the value
   * of the `referenceBases` field or a 1-based index into
   * `alternateBases`. If a variant had a `referenceBases`
   * value of `T` and an `alternateBases`
   * value of `["A", "C"]`, and the `genotype` was
   * `[2, 1]`, that would mean the call
   * represented the heterozygous value `CA` for this variant.
   * If the `genotype` was instead `[0, 1]`, the
   * represented value would be `TA`. Ordering of the
   * genotype values is important if the `phaseset` is present.
   * If a genotype is not called (that is, a `.` is present in the
   * GT string) -1 is returned.
   * </pre>
   */
  public int getGenotype(int index) {
    return genotype_.get(index);
  }
  private int genotypeMemoizedSerializedSize = -1;

  public static final int PHASESET_FIELD_NUMBER = 5;
  private volatile java.lang.Object phaseset_;
  /**
   * <code>optional string phaseset = 5;</code>
   *
   * <pre>
   * If this field is present, this variant call's genotype ordering implies
   * the phase of the bases and is consistent with any other variant calls in
   * the same reference sequence which have the same phaseset value.
   * When importing data from VCF, if the genotype data was phased but no
   * phase set was specified this field will be set to `*`.
   * </pre>
   */
  public java.lang.String getPhaseset() {
    java.lang.Object ref = phaseset_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        phaseset_ = s;
      }
      return s;
    }
  }
  /**
   * <code>optional string phaseset = 5;</code>
   *
   * <pre>
   * If this field is present, this variant call's genotype ordering implies
   * the phase of the bases and is consistent with any other variant calls in
   * the same reference sequence which have the same phaseset value.
   * When importing data from VCF, if the genotype data was phased but no
   * phase set was specified this field will be set to `*`.
   * </pre>
   */
  public com.google.protobuf.ByteString
      getPhasesetBytes() {
    java.lang.Object ref = phaseset_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      phaseset_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int GENOTYPE_LIKELIHOOD_FIELD_NUMBER = 6;
  private java.util.List<java.lang.Double> genotypeLikelihood_;
  /**
   * <code>repeated double genotype_likelihood = 6;</code>
   *
   * <pre>
   * The genotype likelihoods for this variant call. Each array entry
   * represents how likely a specific genotype is for this call. The value
   * ordering is defined by the GL tag in the VCF spec.
   * If Phred-scaled genotype likelihood scores (PL) are available and
   * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
   * to GL scores.  If both are available, PL scores are stored in `info`.
   * </pre>
   */
  public java.util.List<java.lang.Double>
      getGenotypeLikelihoodList() {
    return genotypeLikelihood_;
  }
  /**
   * <code>repeated double genotype_likelihood = 6;</code>
   *
   * <pre>
   * The genotype likelihoods for this variant call. Each array entry
   * represents how likely a specific genotype is for this call. The value
   * ordering is defined by the GL tag in the VCF spec.
   * If Phred-scaled genotype likelihood scores (PL) are available and
   * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
   * to GL scores.  If both are available, PL scores are stored in `info`.
   * </pre>
   */
  public int getGenotypeLikelihoodCount() {
    return genotypeLikelihood_.size();
  }
  /**
   * <code>repeated double genotype_likelihood = 6;</code>
   *
   * <pre>
   * The genotype likelihoods for this variant call. Each array entry
   * represents how likely a specific genotype is for this call. The value
   * ordering is defined by the GL tag in the VCF spec.
   * If Phred-scaled genotype likelihood scores (PL) are available and
   * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
   * to GL scores.  If both are available, PL scores are stored in `info`.
   * </pre>
   */
  public double getGenotypeLikelihood(int index) {
    return genotypeLikelihood_.get(index);
  }
  private int genotypeLikelihoodMemoizedSerializedSize = -1;

  public static final int INFO_FIELD_NUMBER = 2;
  private static final class InfoDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.google.protobuf.ListValue> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.google.protobuf.ListValue>newDefaultInstance(
                com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_VariantCall_InfoEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.google.protobuf.ListValue.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.google.protobuf.ListValue> info_;
  private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ListValue>
  internalGetInfo() {
    if (info_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          InfoDefaultEntryHolder.defaultEntry);
   }
    return info_;
  }
  /**
   * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
   *
   * <pre>
   * A map of additional variant call information. This must be of the form
   * map&lt;string, string[]&gt; (string key mapping to a list of string values).
   * </pre>
   */

  public java.util.Map<java.lang.String, com.google.protobuf.ListValue> getInfo() {
    return internalGetInfo().getMap();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    for (java.util.Map.Entry<java.lang.String, com.google.protobuf.ListValue> entry
         : internalGetInfo().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.ListValue>
      info = InfoDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      output.writeMessage(2, info);
    }
    if (!getPhasesetBytes().isEmpty()) {
      output.writeBytes(5, getPhasesetBytes());
    }
    if (getGenotypeLikelihoodList().size() > 0) {
      output.writeRawVarint32(50);
      output.writeRawVarint32(genotypeLikelihoodMemoizedSerializedSize);
    }
    for (int i = 0; i < genotypeLikelihood_.size(); i++) {
      output.writeDoubleNoTag(genotypeLikelihood_.get(i));
    }
    if (getGenotypeList().size() > 0) {
      output.writeRawVarint32(58);
      output.writeRawVarint32(genotypeMemoizedSerializedSize);
    }
    for (int i = 0; i < genotype_.size(); i++) {
      output.writeInt32NoTag(genotype_.get(i));
    }
    if (!getCallSetIdBytes().isEmpty()) {
      output.writeBytes(8, getCallSetIdBytes());
    }
    if (!getCallSetNameBytes().isEmpty()) {
      output.writeBytes(9, getCallSetNameBytes());
    }
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<java.lang.String, com.google.protobuf.ListValue> entry
         : internalGetInfo().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.ListValue>
      info = InfoDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, info);
    }
    if (!getPhasesetBytes().isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(5, getPhasesetBytes());
    }
    {
      int dataSize = 0;
      dataSize = 8 * getGenotypeLikelihoodList().size();
      size += dataSize;
      if (!getGenotypeLikelihoodList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      genotypeLikelihoodMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < genotype_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(genotype_.get(i));
      }
      size += dataSize;
      if (!getGenotypeList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      genotypeMemoizedSerializedSize = dataSize;
    }
    if (!getCallSetIdBytes().isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(8, getCallSetIdBytes());
    }
    if (!getCallSetNameBytes().isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(9, getCallSetNameBytes());
    }
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  public static com.google.genomics.v1.VariantCall parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.genomics.v1.VariantCall parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.genomics.v1.VariantCall parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.genomics.v1.VariantCall parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.genomics.v1.VariantCall parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.google.genomics.v1.VariantCall parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static com.google.genomics.v1.VariantCall parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static com.google.genomics.v1.VariantCall parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static com.google.genomics.v1.VariantCall parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.google.genomics.v1.VariantCall parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.genomics.v1.VariantCall prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code google.genomics.v1.VariantCall}
   *
   * <pre>
   * A call represents the determination of genotype with respect to a particular
   * variant. It may include associated information such as quality and phasing.
   * For example, a call might assign a probability of 0.32 to the occurrence of
   * a SNP named rs1234 in a call set with the name NA12345.
   * </pre>
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.genomics.v1.VariantCall)
      com.google.genomics.v1.VariantCallOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_VariantCall_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetInfo();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutableInfo();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_VariantCall_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.genomics.v1.VariantCall.class, com.google.genomics.v1.VariantCall.Builder.class);
    }

    // Construct using com.google.genomics.v1.VariantCall.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      callSetId_ = "";

      callSetName_ = "";

      genotype_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      phaseset_ = "";

      genotypeLikelihood_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      internalGetMutableInfo().clear();
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_VariantCall_descriptor;
    }

    public com.google.genomics.v1.VariantCall getDefaultInstanceForType() {
      return com.google.genomics.v1.VariantCall.getDefaultInstance();
    }

    public com.google.genomics.v1.VariantCall build() {
      com.google.genomics.v1.VariantCall result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.google.genomics.v1.VariantCall buildPartial() {
      com.google.genomics.v1.VariantCall result = new com.google.genomics.v1.VariantCall(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.callSetId_ = callSetId_;
      result.callSetName_ = callSetName_;
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        genotype_ = java.util.Collections.unmodifiableList(genotype_);
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.genotype_ = genotype_;
      result.phaseset_ = phaseset_;
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        genotypeLikelihood_ = java.util.Collections.unmodifiableList(genotypeLikelihood_);
        bitField0_ = (bitField0_ & ~0x00000010);
      }
      result.genotypeLikelihood_ = genotypeLikelihood_;
      result.info_ = internalGetInfo();
      result.info_.makeImmutable();
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.genomics.v1.VariantCall) {
        return mergeFrom((com.google.genomics.v1.VariantCall)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.genomics.v1.VariantCall other) {
      if (other == com.google.genomics.v1.VariantCall.getDefaultInstance()) return this;
      if (!other.getCallSetId().isEmpty()) {
        callSetId_ = other.callSetId_;
        onChanged();
      }
      if (!other.getCallSetName().isEmpty()) {
        callSetName_ = other.callSetName_;
        onChanged();
      }
      if (!other.genotype_.isEmpty()) {
        if (genotype_.isEmpty()) {
          genotype_ = other.genotype_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureGenotypeIsMutable();
          genotype_.addAll(other.genotype_);
        }
        onChanged();
      }
      if (!other.getPhaseset().isEmpty()) {
        phaseset_ = other.phaseset_;
        onChanged();
      }
      if (!other.genotypeLikelihood_.isEmpty()) {
        if (genotypeLikelihood_.isEmpty()) {
          genotypeLikelihood_ = other.genotypeLikelihood_;
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          ensureGenotypeLikelihoodIsMutable();
          genotypeLikelihood_.addAll(other.genotypeLikelihood_);
        }
        onChanged();
      }
      internalGetMutableInfo().mergeFrom(
          other.internalGetInfo());
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.genomics.v1.VariantCall parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.genomics.v1.VariantCall) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object callSetId_ = "";
    /**
     * <code>optional string call_set_id = 8;</code>
     *
     * <pre>
     * The ID of the call set this variant call belongs to.
     * </pre>
     */
    public java.lang.String getCallSetId() {
      java.lang.Object ref = callSetId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          callSetId_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string call_set_id = 8;</code>
     *
     * <pre>
     * The ID of the call set this variant call belongs to.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCallSetIdBytes() {
      java.lang.Object ref = callSetId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        callSetId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string call_set_id = 8;</code>
     *
     * <pre>
     * The ID of the call set this variant call belongs to.
     * </pre>
     */
    public Builder setCallSetId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      callSetId_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string call_set_id = 8;</code>
     *
     * <pre>
     * The ID of the call set this variant call belongs to.
     * </pre>
     */
    public Builder clearCallSetId() {
      
      callSetId_ = getDefaultInstance().getCallSetId();
      onChanged();
      return this;
    }
    /**
     * <code>optional string call_set_id = 8;</code>
     *
     * <pre>
     * The ID of the call set this variant call belongs to.
     * </pre>
     */
    public Builder setCallSetIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      callSetId_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object callSetName_ = "";
    /**
     * <code>optional string call_set_name = 9;</code>
     *
     * <pre>
     * The name of the call set this variant call belongs to.
     * </pre>
     */
    public java.lang.String getCallSetName() {
      java.lang.Object ref = callSetName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          callSetName_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string call_set_name = 9;</code>
     *
     * <pre>
     * The name of the call set this variant call belongs to.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCallSetNameBytes() {
      java.lang.Object ref = callSetName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        callSetName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string call_set_name = 9;</code>
     *
     * <pre>
     * The name of the call set this variant call belongs to.
     * </pre>
     */
    public Builder setCallSetName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      callSetName_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string call_set_name = 9;</code>
     *
     * <pre>
     * The name of the call set this variant call belongs to.
     * </pre>
     */
    public Builder clearCallSetName() {
      
      callSetName_ = getDefaultInstance().getCallSetName();
      onChanged();
      return this;
    }
    /**
     * <code>optional string call_set_name = 9;</code>
     *
     * <pre>
     * The name of the call set this variant call belongs to.
     * </pre>
     */
    public Builder setCallSetNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      callSetName_ = value;
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Integer> genotype_ = java.util.Collections.emptyList();
    private void ensureGenotypeIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        genotype_ = new java.util.ArrayList<java.lang.Integer>(genotype_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <code>repeated int32 genotype = 7;</code>
     *
     * <pre>
     * The genotype of this variant call. Each value represents either the value
     * of the `referenceBases` field or a 1-based index into
     * `alternateBases`. If a variant had a `referenceBases`
     * value of `T` and an `alternateBases`
     * value of `["A", "C"]`, and the `genotype` was
     * `[2, 1]`, that would mean the call
     * represented the heterozygous value `CA` for this variant.
     * If the `genotype` was instead `[0, 1]`, the
     * represented value would be `TA`. Ordering of the
     * genotype values is important if the `phaseset` is present.
     * If a genotype is not called (that is, a `.` is present in the
     * GT string) -1 is returned.
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getGenotypeList() {
      return java.util.Collections.unmodifiableList(genotype_);
    }
    /**
     * <code>repeated int32 genotype = 7;</code>
     *
     * <pre>
     * The genotype of this variant call. Each value represents either the value
     * of the `referenceBases` field or a 1-based index into
     * `alternateBases`. If a variant had a `referenceBases`
     * value of `T` and an `alternateBases`
     * value of `["A", "C"]`, and the `genotype` was
     * `[2, 1]`, that would mean the call
     * represented the heterozygous value `CA` for this variant.
     * If the `genotype` was instead `[0, 1]`, the
     * represented value would be `TA`. Ordering of the
     * genotype values is important if the `phaseset` is present.
     * If a genotype is not called (that is, a `.` is present in the
     * GT string) -1 is returned.
     * </pre>
     */
    public int getGenotypeCount() {
      return genotype_.size();
    }
    /**
     * <code>repeated int32 genotype = 7;</code>
     *
     * <pre>
     * The genotype of this variant call. Each value represents either the value
     * of the `referenceBases` field or a 1-based index into
     * `alternateBases`. If a variant had a `referenceBases`
     * value of `T` and an `alternateBases`
     * value of `["A", "C"]`, and the `genotype` was
     * `[2, 1]`, that would mean the call
     * represented the heterozygous value `CA` for this variant.
     * If the `genotype` was instead `[0, 1]`, the
     * represented value would be `TA`. Ordering of the
     * genotype values is important if the `phaseset` is present.
     * If a genotype is not called (that is, a `.` is present in the
     * GT string) -1 is returned.
     * </pre>
     */
    public int getGenotype(int index) {
      return genotype_.get(index);
    }
    /**
     * <code>repeated int32 genotype = 7;</code>
     *
     * <pre>
     * The genotype of this variant call. Each value represents either the value
     * of the `referenceBases` field or a 1-based index into
     * `alternateBases`. If a variant had a `referenceBases`
     * value of `T` and an `alternateBases`
     * value of `["A", "C"]`, and the `genotype` was
     * `[2, 1]`, that would mean the call
     * represented the heterozygous value `CA` for this variant.
     * If the `genotype` was instead `[0, 1]`, the
     * represented value would be `TA`. Ordering of the
     * genotype values is important if the `phaseset` is present.
     * If a genotype is not called (that is, a `.` is present in the
     * GT string) -1 is returned.
     * </pre>
     */
    public Builder setGenotype(
        int index, int value) {
      ensureGenotypeIsMutable();
      genotype_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 genotype = 7;</code>
     *
     * <pre>
     * The genotype of this variant call. Each value represents either the value
     * of the `referenceBases` field or a 1-based index into
     * `alternateBases`. If a variant had a `referenceBases`
     * value of `T` and an `alternateBases`
     * value of `["A", "C"]`, and the `genotype` was
     * `[2, 1]`, that would mean the call
     * represented the heterozygous value `CA` for this variant.
     * If the `genotype` was instead `[0, 1]`, the
     * represented value would be `TA`. Ordering of the
     * genotype values is important if the `phaseset` is present.
     * If a genotype is not called (that is, a `.` is present in the
     * GT string) -1 is returned.
     * </pre>
     */
    public Builder addGenotype(int value) {
      ensureGenotypeIsMutable();
      genotype_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 genotype = 7;</code>
     *
     * <pre>
     * The genotype of this variant call. Each value represents either the value
     * of the `referenceBases` field or a 1-based index into
     * `alternateBases`. If a variant had a `referenceBases`
     * value of `T` and an `alternateBases`
     * value of `["A", "C"]`, and the `genotype` was
     * `[2, 1]`, that would mean the call
     * represented the heterozygous value `CA` for this variant.
     * If the `genotype` was instead `[0, 1]`, the
     * represented value would be `TA`. Ordering of the
     * genotype values is important if the `phaseset` is present.
     * If a genotype is not called (that is, a `.` is present in the
     * GT string) -1 is returned.
     * </pre>
     */
    public Builder addAllGenotype(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureGenotypeIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, genotype_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 genotype = 7;</code>
     *
     * <pre>
     * The genotype of this variant call. Each value represents either the value
     * of the `referenceBases` field or a 1-based index into
     * `alternateBases`. If a variant had a `referenceBases`
     * value of `T` and an `alternateBases`
     * value of `["A", "C"]`, and the `genotype` was
     * `[2, 1]`, that would mean the call
     * represented the heterozygous value `CA` for this variant.
     * If the `genotype` was instead `[0, 1]`, the
     * represented value would be `TA`. Ordering of the
     * genotype values is important if the `phaseset` is present.
     * If a genotype is not called (that is, a `.` is present in the
     * GT string) -1 is returned.
     * </pre>
     */
    public Builder clearGenotype() {
      genotype_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }

    private java.lang.Object phaseset_ = "";
    /**
     * <code>optional string phaseset = 5;</code>
     *
     * <pre>
     * If this field is present, this variant call's genotype ordering implies
     * the phase of the bases and is consistent with any other variant calls in
     * the same reference sequence which have the same phaseset value.
     * When importing data from VCF, if the genotype data was phased but no
     * phase set was specified this field will be set to `*`.
     * </pre>
     */
    public java.lang.String getPhaseset() {
      java.lang.Object ref = phaseset_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          phaseset_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string phaseset = 5;</code>
     *
     * <pre>
     * If this field is present, this variant call's genotype ordering implies
     * the phase of the bases and is consistent with any other variant calls in
     * the same reference sequence which have the same phaseset value.
     * When importing data from VCF, if the genotype data was phased but no
     * phase set was specified this field will be set to `*`.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPhasesetBytes() {
      java.lang.Object ref = phaseset_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        phaseset_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string phaseset = 5;</code>
     *
     * <pre>
     * If this field is present, this variant call's genotype ordering implies
     * the phase of the bases and is consistent with any other variant calls in
     * the same reference sequence which have the same phaseset value.
     * When importing data from VCF, if the genotype data was phased but no
     * phase set was specified this field will be set to `*`.
     * </pre>
     */
    public Builder setPhaseset(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      phaseset_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string phaseset = 5;</code>
     *
     * <pre>
     * If this field is present, this variant call's genotype ordering implies
     * the phase of the bases and is consistent with any other variant calls in
     * the same reference sequence which have the same phaseset value.
     * When importing data from VCF, if the genotype data was phased but no
     * phase set was specified this field will be set to `*`.
     * </pre>
     */
    public Builder clearPhaseset() {
      
      phaseset_ = getDefaultInstance().getPhaseset();
      onChanged();
      return this;
    }
    /**
     * <code>optional string phaseset = 5;</code>
     *
     * <pre>
     * If this field is present, this variant call's genotype ordering implies
     * the phase of the bases and is consistent with any other variant calls in
     * the same reference sequence which have the same phaseset value.
     * When importing data from VCF, if the genotype data was phased but no
     * phase set was specified this field will be set to `*`.
     * </pre>
     */
    public Builder setPhasesetBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      phaseset_ = value;
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Double> genotypeLikelihood_ = java.util.Collections.emptyList();
    private void ensureGenotypeLikelihoodIsMutable() {
      if (!((bitField0_ & 0x00000010) == 0x00000010)) {
        genotypeLikelihood_ = new java.util.ArrayList<java.lang.Double>(genotypeLikelihood_);
        bitField0_ |= 0x00000010;
       }
    }
    /**
     * <code>repeated double genotype_likelihood = 6;</code>
     *
     * <pre>
     * The genotype likelihoods for this variant call. Each array entry
     * represents how likely a specific genotype is for this call. The value
     * ordering is defined by the GL tag in the VCF spec.
     * If Phred-scaled genotype likelihood scores (PL) are available and
     * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
     * to GL scores.  If both are available, PL scores are stored in `info`.
     * </pre>
     */
    public java.util.List<java.lang.Double>
        getGenotypeLikelihoodList() {
      return java.util.Collections.unmodifiableList(genotypeLikelihood_);
    }
    /**
     * <code>repeated double genotype_likelihood = 6;</code>
     *
     * <pre>
     * The genotype likelihoods for this variant call. Each array entry
     * represents how likely a specific genotype is for this call. The value
     * ordering is defined by the GL tag in the VCF spec.
     * If Phred-scaled genotype likelihood scores (PL) are available and
     * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
     * to GL scores.  If both are available, PL scores are stored in `info`.
     * </pre>
     */
    public int getGenotypeLikelihoodCount() {
      return genotypeLikelihood_.size();
    }
    /**
     * <code>repeated double genotype_likelihood = 6;</code>
     *
     * <pre>
     * The genotype likelihoods for this variant call. Each array entry
     * represents how likely a specific genotype is for this call. The value
     * ordering is defined by the GL tag in the VCF spec.
     * If Phred-scaled genotype likelihood scores (PL) are available and
     * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
     * to GL scores.  If both are available, PL scores are stored in `info`.
     * </pre>
     */
    public double getGenotypeLikelihood(int index) {
      return genotypeLikelihood_.get(index);
    }
    /**
     * <code>repeated double genotype_likelihood = 6;</code>
     *
     * <pre>
     * The genotype likelihoods for this variant call. Each array entry
     * represents how likely a specific genotype is for this call. The value
     * ordering is defined by the GL tag in the VCF spec.
     * If Phred-scaled genotype likelihood scores (PL) are available and
     * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
     * to GL scores.  If both are available, PL scores are stored in `info`.
     * </pre>
     */
    public Builder setGenotypeLikelihood(
        int index, double value) {
      ensureGenotypeLikelihoodIsMutable();
      genotypeLikelihood_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated double genotype_likelihood = 6;</code>
     *
     * <pre>
     * The genotype likelihoods for this variant call. Each array entry
     * represents how likely a specific genotype is for this call. The value
     * ordering is defined by the GL tag in the VCF spec.
     * If Phred-scaled genotype likelihood scores (PL) are available and
     * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
     * to GL scores.  If both are available, PL scores are stored in `info`.
     * </pre>
     */
    public Builder addGenotypeLikelihood(double value) {
      ensureGenotypeLikelihoodIsMutable();
      genotypeLikelihood_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated double genotype_likelihood = 6;</code>
     *
     * <pre>
     * The genotype likelihoods for this variant call. Each array entry
     * represents how likely a specific genotype is for this call. The value
     * ordering is defined by the GL tag in the VCF spec.
     * If Phred-scaled genotype likelihood scores (PL) are available and
     * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
     * to GL scores.  If both are available, PL scores are stored in `info`.
     * </pre>
     */
    public Builder addAllGenotypeLikelihood(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureGenotypeLikelihoodIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, genotypeLikelihood_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated double genotype_likelihood = 6;</code>
     *
     * <pre>
     * The genotype likelihoods for this variant call. Each array entry
     * represents how likely a specific genotype is for this call. The value
     * ordering is defined by the GL tag in the VCF spec.
     * If Phred-scaled genotype likelihood scores (PL) are available and
     * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
     * to GL scores.  If both are available, PL scores are stored in `info`.
     * </pre>
     */
    public Builder clearGenotypeLikelihood() {
      genotypeLikelihood_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.google.protobuf.ListValue> info_;
    private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ListValue>
    internalGetInfo() {
      if (info_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            InfoDefaultEntryHolder.defaultEntry);
     }
      return info_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ListValue>
    internalGetMutableInfo() {
      onChanged();;
      if (info_ == null) {
        info_ = com.google.protobuf.MapField.newMapField(
            InfoDefaultEntryHolder.defaultEntry);
      }
      if (!info_.isMutable()) {
        info_ = info_.copy();
      }
      return info_;
    }
    /**
     * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
     *
     * <pre>
     * A map of additional variant call information. This must be of the form
     * map&lt;string, string[]&gt; (string key mapping to a list of string values).
     * </pre>
     */
    public java.util.Map<java.lang.String, com.google.protobuf.ListValue> getInfo() {
      return internalGetInfo().getMap();
    }
    /**
     * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
     *
     * <pre>
     * A map of additional variant call information. This must be of the form
     * map&lt;string, string[]&gt; (string key mapping to a list of string values).
     * </pre>
     */
    public java.util.Map<java.lang.String, com.google.protobuf.ListValue>
    getMutableInfo() {
      return internalGetMutableInfo().getMutableMap();
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:google.genomics.v1.VariantCall)
  }

  // @@protoc_insertion_point(class_scope:google.genomics.v1.VariantCall)
  private static final com.google.genomics.v1.VariantCall DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.genomics.v1.VariantCall();
  }

  public static com.google.genomics.v1.VariantCall getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  public static final com.google.protobuf.Parser<VariantCall> PARSER =
      new com.google.protobuf.AbstractParser<VariantCall>() {
    public VariantCall parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      try {
        return new VariantCall(input, extensionRegistry);
      } catch (RuntimeException e) {
        if (e.getCause() instanceof
            com.google.protobuf.InvalidProtocolBufferException) {
          throw (com.google.protobuf.InvalidProtocolBufferException)
              e.getCause();
        }
        throw e;
      }
    }
  };

  public static com.google.protobuf.Parser<VariantCall> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<VariantCall> getParserForType() {
    return PARSER;
  }

  public com.google.genomics.v1.VariantCall getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

